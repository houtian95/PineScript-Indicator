//@version=4
// Copyright (c) 2021-present, Alex Orekhov (everget)
// Gaps % Size Distribution script may be freely distributed under the terms of GPL-3.0 license.
var int MAX_OBJECTS_COUNT = 500
study("Gaps % Size Distribution", max_lines_count=MAX_OBJECTS_COUNT, max_labels_count=MAX_OBJECTS_COUNT)

var bool reboot = input(title="Reboot (Click in case of any error)", defval=false)
// var bool useDate = input(title="", defval=false, inline=dateInline)
// int startDate = input(title="Start Aggregation from", type=input.time, defval=timestamp("01 Jan 2019 00:00"), inline=dateInline)
var float binningStep = input(title="Binning Step", type=input.float, minval=0.0001, defval=0.25, step=0.005)
var int maxColumns = input(title="Columns Number (Max: 500)", minval=2, maxval=500, defval=300)
var int columnWidth = input(title="Columns Width", defval=12)
var bool showLabels = input(title="Show Labels", defval=true)
var int nthLabel = input(title="Show Each Nth Label", minval=1, defval=5)

//------------------------------------------------------------------------------

// var int firstTime = time
// startCondition = useDate ? time(timeframe.period) >= min(firstTime, startDate) : true

var color columnColor = #ffb74d
var color labelColor = #1e90ff
var color labelTextColor = color.white

var int sizeLimit = floor(maxColumns / 2)
var int[] posValues = array.new_int(sizeLimit, 0)
var label[] posLabels = array.new_label(sizeLimit, na)

var int[] negValues = array.new_int(sizeLimit, 0)
var label[] negLabels = array.new_label(sizeLimit, na)

//------------------------------------------------------------------------------

_roc(current, basis) =>
	out = 100 * (current / basis - 1)
	out

_str(value, decimals) =>
	out = tostring(value, "#")
	out :=
		 decimals == 1 ? tostring(value, "#.#") :
		 decimals == 2 ? tostring(value, "#.##") :
		 decimals == 3 ? tostring(value, "#.###") :
		 decimals == 4 ? tostring(value, "#.####") :
		 decimals == 5 ? tostring(value, "#.#####") :
		 decimals == 6 ? tostring(value, "#.######") :
		 decimals == 7 ? tostring(value, "#.#######") :
		 decimals == 8 ? tostring(value, "#.########") :
		 decimals == 9 ? tostring(value, "#.#########") :
		 decimals == 10 ? tostring(value, "#.##########") :
		 decimals == 11 ? tostring(value, "#.###########") :
		 decimals == 12 ? tostring(value, "#.############") :
		 decimals == 13 ? tostring(value, "#.#############") :
		 decimals == 14 ? tostring(value, "#.##############") :
		 decimals == 15 ? tostring(value, "#.###############") :
		 decimals == 16 ? tostring(value, "#.################") :
		 out
	out

_format(value1, value2, decimals) =>
	out = _str(value1, decimals) + "%" + "\n-\n" + _str(value2, decimals) + "%"
	out

_labelText(value1, value2) =>
	out =
		 binningStep < 0.001 ? _format(value1, value2, 4) :
		 binningStep < 0.01 ? _format(value1, value2, 3) : 
		 _format(value1, value2, 2)
	out

_line(x, y) =>
	barTime = time[x]
	line l = line.new(
		 x1=barTime,
		 y1=0,
		 x2=barTime,
		 y2=y,
		 xloc=xloc.bar_time,
		 width=columnWidth,
		 color=columnColor
		 )
	line.delete(l[1])
	out = l
	out

_label(x, y, side, labelText, tooltipText) =>
	barTime = time[x]
	labelStyle = side == -1 ? label.style_label_up : label.style_label_down
	label l = label.new(
		 x=barTime,
		 y=y,
		 xloc=xloc.bar_time,
		 tooltip=tooltipText,
		 text=labelText,
		 textcolor=labelTextColor,
		 color=labelColor,
		 style=labelStyle,
		 size=size.small
		 )
	label.delete(l[1])
	out = l
	out

//------------------------------------------------------------------------------

isGapUp = close[1] < open
isGapDown = close[1] > open
size = _roc(open, close[1])

if isGapUp// and startCondition
	for i = 0 to sizeLimit - 1
		if i * binningStep <= size and size < (i + 1) * binningStep
			array.set(posValues, i, array.get(posValues, i) + 1)

if isGapDown// and startCondition
	for i = 0 to sizeLimit - 1
		if -(i + 1) * binningStep < size and size <= -i * binningStep
			array.set(negValues, i, array.get(negValues, i) + 1)

if barstate.islast
	for i = 0 to array.size(posValues) - 1
		posStart = sizeLimit - i
		negStart = sizeLimit + 1 + i
	
		posValue = array.get(posValues, i)
		negValue = array.get(negValues, i)
	
		_line(posStart, posValue)
		_line(negStart, negValue)

		if showLabels
			posLabel = array.get(posLabels, i)
			posText = _labelText(i * binningStep, (i + 1) * binningStep)
			posTooltip = tostring(posValue, "#")
		
			negLabel = array.get(negLabels, i)
			negText = _labelText(-i * binningStep, -(i + 1) * binningStep)
			negTooltip = tostring(negValue, "#")

			if i % nthLabel == 0
				if na(negLabel)
					negLabel := _label(negStart, 0, -1, negText, negTooltip)
					array.set(negLabels, i, negLabel)
				else
					label.set_x(negLabel, time[negStart])
					label.set_text(negLabel, negText)
					label.set_tooltip(negLabel, negTooltip)

				if na(posLabel)
					posLabel := _label(posStart, 0, -1, posText, posTooltip)
					array.set(posLabels, i, posLabel)
				else
					label.set_x(posLabel, time[posStart])
					label.set_text(posLabel, posText)
					label.set_tooltip(posLabel, posTooltip)
